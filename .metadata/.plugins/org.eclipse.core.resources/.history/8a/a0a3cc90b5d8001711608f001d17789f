package com.q.alert.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.q.alert.entities.Employee;
import com.q.alert.repository.EmployeeRepository;

@RestController
@RequestMapping(value = "/employees")
public class EmployeeController {

	@Autowired
	EmployeeRepository employeeRepository;
	
	@GetMapping(value = "/get/{id}")
	public Employee get(@PathVariable Long id) {
		return employeeRepository.findOne(id);
	}

	@GetMapping(value = "/getall")
	public List<Employee> getAll() {
		return employeeRepository.findAll();
	}

	@PostMapping(value = "/upsert")
	public List<Employee> upsert(@RequestBody final Employee employee) {
		employeeRepository.save(employee);
		return employeeRepository.findAll();
	}
	
	@PutMapping(value = "/create")
	public List<Employee> create(@RequestBody final Employee employee) {
		Long id = employee.getId();
		if (id == null) {
			employeeRepository.save(employee);
		} else {
			Employee employeeEntry = employeeRepository.findOne(id);
			if (employeeEntry == null)
				employeeRepository.save(employee);
			else
				System.out.println("Employee already exist.");
		}
		return employeeRepository.findAll();
	}
	
	@PostMapping(value = "/update")
	public List<Employee> update(@RequestBody final Employee employee) {
		Long id = employee.getId();
		
		if (id == null) {
			System.out.println("Employee id must be provided.");
		} else {
			Employee employeeToUpdate = employeeRepository.findOne(id);
			if (employeeToUpdate == null)
				System.out.println("Employee don't exist.");
			else {
				
				Double employeeSalary = employee.getSalary();
				if (employeeSalary == null)
					employeeToUpdate.setSalary(employee.getSalary());
				
				employeeRepository.save(employee);
			}
		}

		return employeeRepository.findAll();
	}

	@DeleteMapping(value = "/delete")
	public void delete(@RequestBody final Employee employee) {
		employeeRepository.delete(employee);
	}
	
}